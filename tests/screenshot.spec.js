// @ts-check
const { test, expect } = require('@playwright/test');
const { ethers } = require('ethers');
const fs = require('fs');
const path = require('path');

// Hardhat private key
// const PRIVATE_KEY = '0xde9be858da4a475276426320d5e9262ecfc3ba460bfac56360bfa6c4c28b4ee0';
const PRIVATE_KEY = '0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d';
// Wallet from the private key
const wallet = new ethers.Wallet(PRIVATE_KEY);
const address = wallet.address;

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const screenshotsDir = path.join(__dirname, '../screenshots');
if (!fs.existsSync(screenshotsDir)) {
  fs.mkdirSync(screenshotsDir, { recursive: true });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
async function takeScreenshot(page, name) {
  console.log(`üì∏ Taking screenshot: ${name}`);
  await page.screenshot({ path: path.join(screenshotsDir, `${name}.png`), fullPage: true });
}

// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è headless/headed —Ä–µ–∂–∏–º–∞
const showBrowser = process.env.SHOW_BROWSER === '1' || process.env.SHOW_BROWSER === 'true';

test('Full Lotto App test with MetaMask simulation', async ({ page, browserName, context }) => {
  console.log('Test started');
  console.log(`Using wallet address: ${address}`);

  // –í–ê–ñ–ù–û: —ç–º—É–ª–∏—Ä—É–µ–º MetaMask –î–û –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —á—Ç–æ–±—ã React —É–≤–∏–¥–µ–ª window.ethereum —Å—Ä–∞–∑—É
  await page.addInitScript((walletAddress) => {
    // @ts-ignore
    const handlers = {};
    // @ts-ignore
    window.ethereum = {
      isMetaMask: true,
      chainId: '0x7A69',
      networkVersion: '31337',
      selectedAddress: walletAddress,
      handlers,
      request: async ({ method, params }) => {
        if (method === 'eth_requestAccounts' || method === 'eth_accounts') {
          return [walletAddress];
        }
        if (method === 'eth_getBalance') {
          return '0x56BC75E2D63100000';
        }
        if (method === 'eth_sendTransaction') {
          return '0x123456789abcdef123456789abcdef123456789abcdef123456789abcdef1234';
        }
        if (method === 'eth_call') {
          return '0x';
        }
        if (method === 'eth_estimateGas') {
          return '0x5208';
        }
        if (method === 'eth_getTransactionReceipt') {
          return { status: '0x1', blockNumber: '0x1', logs: [] };
        }
        return null;
      },
      on: (eventName, listener) => {
        if (!handlers[eventName]) handlers[eventName] = [];
        handlers[eventName].push(listener);
      },
      emit: (eventName, ...args) => {
        if (handlers[eventName]) {
          handlers[eventName].forEach(fn => fn(...args));
        }
      },
      isConnected: () => true
    };
  }, address);

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  await page.goto('http://localhost:8080');
  console.log('Page loaded');
  await takeScreenshot(page, '01-initial-page');

  // –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  await page.waitForLoadState('networkidle');

  console.log('MetaMask mock injected');

  // –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MetaMask
  // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É Connect MetaMask –∏ –∫–ª–∏–∫–Ω—É—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
  const connectButton = page.locator('button:has-text("Connect MetaMask")').first();
  if (await connectButton.count() > 0) {
    console.log('Clicking Connect MetaMask button');
    await connectButton.click();
  } else {
    console.log('Connect MetaMask button not found, –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  // –û—Ç–ª–∞–¥–∫–∞: –ª–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ window.ethereum –∏ account –≤ –±—Ä–∞—É–∑–µ—Ä–µ
  await page.evaluate(() => {
    // @ts-ignore
    console.log('DEBUG ethereum.selectedAddress:', window.ethereum && window.ethereum.selectedAddress);
    // @ts-ignore
    window.ethereum && window.ethereum.request({ method: 'eth_accounts' }).then(accs => console.log('DEBUG eth_accounts:', accs));
  });

  // –¢—Ä–∏–≥–≥–µ—Ä–∏–º accountsChanged –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ React
  await page.evaluate((walletAddress) => {
    // @ts-ignore
    if (window.ethereum && window.ethereum.emit) {
      // @ts-ignore
      window.ethereum.selectedAddress = walletAddress;
      // @ts-ignore
      window.ethereum.emit('accountsChanged', [walletAddress]);
      // @ts-ignore
      console.log('DEBUG emit accountsChanged:', walletAddress);
    }
  }, address);

  // –û—Ç–ª–∞–¥–∫–∞: –ª–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ accountsChanged
  await page.evaluate(() => {
    // @ts-ignore
    console.log('DEBUG POST-emit ethereum.selectedAddress:', window.ethereum && window.ethereum.selectedAddress);
    // @ts-ignore
    window.ethereum && window.ethereum.request({ method: 'eth_accounts' }).then(accs => console.log('DEBUG POST-emit eth_accounts:', accs));
  });

  // –ü–æ—Å–ª–µ –∫–ª–∏–∫–∞ Connect MetaMask –ø—Ä–æ–±—É–µ–º –≤—Ä—É—á–Ω—É—é –≤—ã–∑–≤–∞—Ç—å getAccount –∏ getBalance —á–µ—Ä–µ–∑ evaluate
  await page.evaluate(async () => {
    // @ts-ignore
    if (typeof window !== 'undefined' && window['ethereum']) {
      // –ü—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å accountsChanged –µ—â—ë —Ä–∞–∑
      if (window['ethereum'].emit && window['ethereum'].selectedAddress) {
        window['ethereum'].emit('accountsChanged', [window['ethereum'].selectedAddress]);
      }
      // –ü—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å eth_requestAccounts
      const accs = await window['ethereum'].request({ method: 'eth_requestAccounts' });
      console.log('DEBUG manual eth_requestAccounts:', accs);
      // –ü—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å eth_accounts
      const accs2 = await window['ethereum'].request({ method: 'eth_accounts' });
      console.log('DEBUG manual eth_accounts:', accs2);
    }
  });

  // –Ø–≤–Ω–æ –∂–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "Deploy New Casino"
  try {
    await page.waitForSelector('button:has-text("Deploy New Casino")', { timeout: 15000 });
  } catch (e) {
    // –û—Ç–ª–∞–¥–∫–∞: –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –ª–æ–≥–∏—Ä—É–µ–º DOM
    await takeScreenshot(page, 'debug-no-deploy-casino');
    const html = await page.content();
    console.log('DEBUG PAGE HTML:', html);
    throw e;
  }

  console.log('Connected to MetaMask');
  await takeScreenshot(page, '02-connected-metamask');

  // –°–±–æ—Ä –æ—à–∏–±–æ–∫ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
  const browserConsoleErrors = [];
  page.on('console', msg => {
    if (msg.type() === 'error') {
      browserConsoleErrors.push(msg.text());
    }
  });

  // –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∫–∞–∑–∏–Ω–æ
  const deployCasinoButton = page.locator('button:has-text("Deploy New Casino")');
  console.log('Deploying Casino');
  await deployCasinoButton.click();
  await page.waitForTimeout(3000);

  // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ Casino: (–∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞)
  try {
    await page.waitForSelector('text=Casino:', { timeout: 10000 });
    console.log('Casino contract address appeared in DOM');
  } catch (e) {
    console.log('Casino contract address did NOT appear!');
    await takeScreenshot(page, '03a-no-casino-address');
    const dom = await page.content();
    fs.writeFileSync(path.join(screenshotsDir, '03a-no-casino-address.html'), dom);
    throw e;
  }

  // –û—Ç–ª–∞–¥–∫–∞ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è –∫–∞–∑–∏–Ω–æ
  await takeScreenshot(page, '03-casino-deployed');
  const casinoDom = await page.content();
  fs.writeFileSync(path.join(screenshotsDir, '03-casino-deployed.html'), casinoDom);
  const casinoButtons = await page.$$eval('button', btns => btns.map(b => b.textContent));
  console.log('Buttons after deploy:', casinoButtons);
  console.log('Browser errors after deploy:', browserConsoleErrors);

  // –Ø–≤–Ω–æ –∂–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "Create new Machine" —Å –æ—Ç–ª–∞–¥–∫–æ–π
  try {
    await page.waitForSelector('button:has-text("Create new Machine")', { timeout: 10000 });
    console.log('Create new Machine button appeared');
  } catch (e) {
    console.log('Create new Machine button did NOT appear!');
    await takeScreenshot(page, '03b-no-create-machine');
    const dom = await page.content();
    fs.writeFileSync(path.join(screenshotsDir, '03b-no-create-machine.html'), dom);
    const allButtons = await page.$$eval('button', btns => btns.map(b => b.textContent));
    console.log('All buttons on page:', allButtons);
    throw e;
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–∞—à–∏–Ω—É
  const createMachineButton = page.locator('button:has-text("Create new Machine")');
  console.log('Creating new Machine');
  await createMachineButton.click();
  await page.waitForTimeout(3000);
  console.log('Machine created');
  await takeScreenshot(page, '04-machine-created');

  // –°–æ–∑–¥–∞–µ–º –±–∏–ª–µ—Ç –Ω–∞ 2 –∏–≥—Ä–æ–∫–∞
  await page.locator('input[placeholder="Price ETH"]').fill('0.1');
  await page.locator('input[placeholder="Limit players"]').fill('2');
  console.log('Creating ticket: 0.1 ETH, 2 players');
  await page.locator('button:has-text("Create ticket")').click();
  await page.waitForTimeout(3000);

  console.log('Ticket created');
  await takeScreenshot(page, '05-ticket-created');

  // –ü–æ–∫—É–ø–∞–µ–º –ø–µ—Ä–≤—ã–π –±–∏–ª–µ—Ç
  const buyTicketButton = page.locator('button:has-text("WIN")').first();
  console.log('Buying first ticket');
  await buyTicketButton.click();
  await page.waitForTimeout(2000);

  console.log('First ticket purchased');
  await takeScreenshot(page, '06-first-ticket-purchased');

  // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ –±–∏–ª–µ—Ç–∞
  await page.evaluate(async () => {
    const secondAddress = '0x70997970C51812dc3A010C7d01b50e0d17dc79C8'; // –í—Ç–æ—Ä–æ–π –∞–∫–∫–∞—É–Ω—Ç Hardhat
    // @ts-ignore
    window.ethereum.selectedAddress = secondAddress;
    console.log('Second wallet created:', secondAddress);
  });

  // –ü–æ–∫—É–ø–∞–µ–º –≤—Ç–æ—Ä–æ–π –±–∏–ª–µ—Ç
  console.log('Buying second ticket');
  await buyTicketButton.click();
  await page.waitForTimeout(5000); // –î–æ–ª—å—à–µ –æ–∂–∏–¥–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–æ–∑—ã–≥—Ä—ã—à

  console.log('Second ticket purchased, lottery should complete');
  await takeScreenshot(page, '07-lottery-completed');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª–æ—Ç–µ—Ä–µ–∏ - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É My Tickets
  await page.locator('a:has-text("My Tickets")').click();
  await page.waitForTimeout(2000);

  console.log('My Tickets page loaded');
  await takeScreenshot(page, '08-my-tickets-page');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const ticketCards = page.locator('.ticket-card');
  const count = await ticketCards.count();
  console.log(`Found ${count} ticket cards`);

  // –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç - –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  await takeScreenshot(page, '09-final-result');

  // === –ù–æ–≤—ã–π —Ü–∏–∫–ª: —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –ª–æ—Ç–µ—Ä–µ—é ===
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
  await page.locator('a:has-text("ETHERIUM LOTTERY")').click();
  await page.waitForTimeout(1000);

  // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –º–∞—à–∏–Ω—É
  await createMachineButton.click();
  await page.waitForTimeout(2000);
  await takeScreenshot(page, '10-machine-created-2');

  // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –±–∏–ª–µ—Ç (0.2 ETH, 2 –∏–≥—Ä–æ–∫–∞)
  await page.locator('input[placeholder="Price ETH"]').fill('0.2');
  await page.locator('input[placeholder="Limit players"]').fill('2');
  await page.locator('button:has-text("Create ticket")').click();
  await page.waitForTimeout(2000);
  await takeScreenshot(page, '11-ticket-created-2');

  // –ü–æ–∫—É–ø–∞–µ–º –ø–µ—Ä–≤—ã–π –±–∏–ª–µ—Ç
  await buyTicketButton.click();
  await page.waitForTimeout(2000);
  await takeScreenshot(page, '12-first-ticket-2');

  // –°–Ω–æ–≤–∞ –º–µ–Ω—è–µ–º –∞–¥—Ä–µ—Å (–≤—Ç–æ—Ä–æ–π –∞–∫–∫–∞—É–Ω—Ç)
  await page.evaluate(() => {
    const secondAddress = '0x70997970C51812dc3A010C7d01b50e0d17dc79C8';
    // @ts-ignore
    window.ethereum.selectedAddress = secondAddress;
  });

  // –ü–æ–∫—É–ø–∞–µ–º –≤—Ç–æ—Ä–æ–π –±–∏–ª–µ—Ç
  await buyTicketButton.click();
  await page.waitForTimeout(5000);
  await takeScreenshot(page, '13-lottery-completed-2');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ç–æ—Ä–æ–π –ª–æ—Ç–µ—Ä–µ–∏
  await page.locator('a:has-text("My Tickets")').click();
  await page.waitForTimeout(2000);
  await takeScreenshot(page, '14-my-tickets-2');

  console.log('Second lottery cycle completed!');
  console.log('Test completed successfully!');

  // –Ø–≤–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ (—á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–µ–ª)
  process.exit(0);
});

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ Playwright –¥–ª—è headless/headed —Ä–µ–∂–∏–º–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if (showBrowser) {
  const { devices, defineConfig } = require('@playwright/test');
  module.exports = defineConfig({
    use: {
      headless: false,
      ...module.exports.use,
    },
  });
}