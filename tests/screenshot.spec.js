// @ts-check
const { test, expect } = require('@playwright/test');
const { ethers } = require('ethers');
const fs = require('fs');
const path = require('path');

// Hardhat private key
// const PRIVATE_KEY = '0xde9be858da4a475276426320d5e9262ecfc3ba460bfac56360bfa6c4c28b4ee0';
const PRIVATE_KEY = '0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d';
// Wallet from the private key
const wallet = new ethers.Wallet(PRIVATE_KEY);
const address = wallet.address;

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
const screenshotsDir = path.join(__dirname, '../screenshots');
if (!fs.existsSync(screenshotsDir)) {
  fs.mkdirSync(screenshotsDir, { recursive: true });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
async function takeScreenshot(page, name) {
  console.log(`üì∏ Taking screenshot: ${name}`);
  await page.screenshot({ path: path.join(screenshotsDir, `${name}.png`), fullPage: true });
}

test('Full Lotto App test with MetaMask simulation', async ({ page }) => {
  console.log('Test started');
  console.log(`Using wallet address: ${address}`);

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  await page.goto('http://localhost:8080');
  console.log('Page loaded');
  await takeScreenshot(page, '01-initial-page');

  // –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  await page.waitForLoadState('networkidle');

  // –≠–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π MetaMask
  await page.evaluate(async (walletAddress) => {
    // @ts-ignore
    window.ethereum = {
      isMetaMask: true,
      chainId: '0x7A69', // Hardhat chainId (31337)
      networkVersion: '31337', // Hardhat networkId
      selectedAddress: walletAddress,

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
      request: async ({ method, params }) => {
        console.log('MetaMask request:', method, params);

        if (method === 'eth_requestAccounts' || method === 'eth_accounts') {
          console.log('Returning account:', walletAddress);
          return [walletAddress];
        }

        if (method === 'eth_getBalance') {
          console.log('Returning balance: 100 ETH');
          return '0x56BC75E2D63100000'; // 100 ETH –≤ hex
        }

        if (method === 'eth_sendTransaction') {
          console.log('Mocking transaction:', params);
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
          return '0x123456789abcdef123456789abcdef123456789abcdef123456789abcdef1234';
        }

        if (method === 'eth_call') {
          console.log('Mocking call:', params);
          // –î–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –≤—ã–∑–æ–≤–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          return '0x';
        }

        if (method === 'eth_estimateGas') {
          console.log('Mocking gas estimate');
          return '0x5208'; // 21000 –≤ hex
        }

        if (method === 'eth_getTransactionReceipt') {
          console.log('Mocking transaction receipt');
          return {
            status: '0x1', // —É—Å–ø–µ—à–Ω–æ
            blockNumber: '0x1',
            logs: []
          };
        }

        console.log('Unhandled method:', method);
        return null;
      },

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
      on: (eventName, listener) => {
        console.log('MetaMask event listener registered:', eventName);
      },

      // –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      isConnected: () => true
    };

    // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MetaMask
    // @ts-ignore
    window.dispatchEvent(new Event('ethereum#initialized'));
  }, address);

  console.log('MetaMask mock injected');

  // –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MetaMask
  const connectButton = page.locator('button:has-text("Connect MetaMask")').first();
  console.log('Clicking Connect MetaMask button');
  await connectButton.click();

  // –Ø–≤–Ω–æ –∂–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "Deploy New Casino"
  await page.waitForSelector('button:has-text("Deploy New Casino")', { timeout: 15000 });

  console.log('Connected to MetaMask');
  await takeScreenshot(page, '02-connected-metamask');

  // –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∫–∞–∑–∏–Ω–æ
  const deployCasinoButton = page.locator('button:has-text("Deploy New Casino")');
  console.log('Deploying Casino');
  await deployCasinoButton.click();
  await page.waitForTimeout(3000);

  console.log('Casino deployed');
  await takeScreenshot(page, '03-casino-deployed');

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–∞—à–∏–Ω—É
  const createMachineButton = page.locator('button:has-text("Create new Machine")');
  console.log('Creating new Machine');
  await createMachineButton.click();
  await page.waitForTimeout(3000);

  console.log('Machine created');
  await takeScreenshot(page, '04-machine-created');

  // –°–æ–∑–¥–∞–µ–º –±–∏–ª–µ—Ç –Ω–∞ 2 –∏–≥—Ä–æ–∫–∞
  await page.locator('input[placeholder="Price ETH"]').fill('0.1');
  await page.locator('input[placeholder="Limit players"]').fill('2');
  console.log('Creating ticket: 0.1 ETH, 2 players');
  await page.locator('button:has-text("Create ticket")').click();
  await page.waitForTimeout(3000);

  console.log('Ticket created');
  await takeScreenshot(page, '05-ticket-created');

  // –ü–æ–∫—É–ø–∞–µ–º –ø–µ—Ä–≤—ã–π –±–∏–ª–µ—Ç
  const buyTicketButton = page.locator('button:has-text("WIN")').first();
  console.log('Buying first ticket');
  await buyTicketButton.click();
  await page.waitForTimeout(2000);

  console.log('First ticket purchased');
  await takeScreenshot(page, '06-first-ticket-purchased');

  // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ –±–∏–ª–µ—Ç–∞
  await page.evaluate(async () => {
    const secondAddress = '0x70997970C51812dc3A010C7d01b50e0d17dc79C8'; // –í—Ç–æ—Ä–æ–π –∞–∫–∫–∞—É–Ω—Ç Hardhat
    // @ts-ignore
    window.ethereum.selectedAddress = secondAddress;
    console.log('Second wallet created:', secondAddress);
  });

  // –ü–æ–∫—É–ø–∞–µ–º –≤—Ç–æ—Ä–æ–π –±–∏–ª–µ—Ç
  console.log('Buying second ticket');
  await buyTicketButton.click();
  await page.waitForTimeout(5000); // –î–æ–ª—å—à–µ –æ–∂–∏–¥–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–æ–∑—ã–≥—Ä—ã—à

  console.log('Second ticket purchased, lottery should complete');
  await takeScreenshot(page, '07-lottery-completed');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ª–æ—Ç–µ—Ä–µ–∏ - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É My Tickets
  await page.locator('a:has-text("My Tickets")').click();
  await page.waitForTimeout(2000);

  console.log('My Tickets page loaded');
  await takeScreenshot(page, '08-my-tickets-page');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const ticketCards = page.locator('.ticket-card');
  const count = await ticketCards.count();
  console.log(`Found ${count} ticket cards`);

  // –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç - –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  await takeScreenshot(page, '09-final-result');

  console.log('Test completed successfully!');
});